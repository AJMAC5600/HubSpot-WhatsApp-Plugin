<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Template Selection</title>
    <link rel="stylesheet" href="/css/style.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  </head>
  <body>
    <div class="container">
      <h1>Template Selection</h1>
      <form id="templateForm" method="POST" action="/templates/submit">
        <!-- Channel ID Selection (Dynamically Fetched) -->
        <label for="channel">Select Channel ID:</label>
        <select id="channel" name="channel" required>
          <option value="" disabled selected>Select a channel</option>
          <% channels.forEach(channel => { %>
          <option value="<%= channel.Number %>"><%= channel.Number %></option>
          <% }) %>
        </select>

        <!-- Category Selection -->
        <label for="category">Select Category:</label>
        <select id="category" name="category" required>
          <option value="" disabled selected>Select a category</option>
          <% categories.forEach(category => { %>
          <option value="<%= category %>"><%= category %></option>
          <% }) %>
        </select>

        <!-- Template Selection -->
        <label for="template">Select Template:</label>
        <select id="template" name="template" required>
          <option value="" disabled selected>Select a template</option>
          <% templates.forEach(template => { %>
          <option value="<%= template.name %>"><%= template.name %></option>
          <% }) %>
        </select>

        <!-- Contact Selection -->
        <label for="contact">Select Contact:</label>
        <select id="contact" name="contact" required>
          <option value="" disabled selected>Select a contact</option>
          <% contacts.forEach(contact => { %>
          <option value="<%= contact.properties.phone %>">
            <%= contact.properties.firstname %> ( <%= contact.properties.phone
            %> )
          </option>
          <% }) %>
        </select>

        <!-- Dynamic Template Configuration -->
        <div class="section" id="header-section">
          <h3>Header</h3>
          <div id="header-inputs"></div>
        </div>

        <div class="section" id="body-section">
          <h3>Body</h3>
          <div id="body-inputs"></div>
        </div>

        <div class="section" id="button-section">
          <h3>Button</h3>
          <div id="button-content"></div>
        </div>

        <!-- Submit Button -->
        <button type="submit">Submit</button>
      </form>
    </div>

    <script>
      let templates = []; // Store all templates fetched from the backend
      let selectedTemplate = null;

      // Fetch templates when the channel is selected
      $("#channel").change(function () {
        const selectedChannel = $(this).val(); // Get the selected channel value

        // Make an AJAX request to fetch templates for the selected channel
        $.ajax({
          url: "/save-channel", // Backend endpoint to fetch templates
          method: "POST",
          data: { channel: selectedChannel },
          success: function (response) {
            if (response.success) {
              templates = response.templates; // Store fetched templates

              // Clear the template dropdown
              updateTemplateDropdown(templates);

              console.log("Templates updated successfully!");
            } else {
              alert("Failed to fetch templates.");
            }
          },
          error: function (error) {
            console.error("Error fetching templates:", error);
            alert("Error fetching templates.");
          },
        });
      });

      // Handle template selection
      $("#template").change(function () {
        const selectedTemplateName = $(this).val(); // Get the selected template name
        const selectedChannel = $("#channel").val();

        // Send the selected template name to the backend immediately
        $.ajax({
          url: "/templates/fetch", // Backend endpoint to handle the submission
          method: "POST",
          data: { template: selectedTemplateName, channel: selectedChannel },
          success: function (response) {
            if (response.success) {
              alert("Template selected: " + selectedTemplateName);
            } else {
              alert("Failed to select template.");
            }
          },
          error: function (error) {
            console.error("Error sending template:", error);
            alert("Error sending template.");
          },
        });
      });
      // send template name to the backend
      $("#channel").change(function () {
        const selectedChannel = $(this).val(); // Get the selected channel value

        // Make an AJAX request to fetch templates for the selected channel
        $.ajax({
          url: "/save-channel", // Backend endpoint to fetch templates
          method: "POST",
          data: { channel: selectedChannel },
          success: function (response) {
            if (response.success) {
              templates = response.templates; // Store fetched templates

              // Clear the template dropdown
              updateTemplateDropdown(templates);

              console.log("Templates updated successfully!");
            } else {
              alert("Failed to fetch templates.");
            }
          },
          error: function (error) {
            console.error("Error fetching templates:", error);
            alert("Error fetching templates.");
          },
        });
      });

      // Filter templates based on the selected category
      $("#category").change(function () {
        const selectedCategory = $(this).val(); // Get the selected category value
        const filteredTemplates = templates.filter(
          (template) => template.category === selectedCategory
        );

        // Update the template dropdown with filtered templates
        updateTemplateDropdown(filteredTemplates);
      });

      // Utility function to update the template dropdown
      function updateTemplateDropdown(templateList) {
        const templateDropdown = $("#template");
        templateDropdown.empty();
        templateDropdown.append(
          '<option value="" disabled selected>Select a template</option>'
        );

        templateList.forEach((template) => {
          templateDropdown.append(
            `<option value="${template.name}">${template.name}</option>`
          );
        });
      }

      // Fetch the template components after selecting the template
      $("#template").change(function () {
        const selectedTemplateName = $(this).val(); // Get selected template name
        selectedTemplate = templates.find(
          (template) => template.name === selectedTemplateName
        );

        if (selectedTemplate) {
          generateInputs();
        }
      });

      // Function to generate inputs dynamically based on the selected template
      function generateInputs() {
        const headerComponent = selectedTemplate.components.find(
          (c) => c.type === "header"
        );
        const bodyComponent = selectedTemplate.components.find(
          (c) => c.type === "body"
        );
        const buttonComponent = selectedTemplate.components.find(
          (c) => c.type === "button"
        );

        // Render inputs for the header
        const headerInputsContainer = document.getElementById("header-inputs");
        headerInputsContainer.innerHTML = "";
        if (headerComponent) {
          headerComponent.parameters.forEach((param, index) => {
            const inputLabel = document.createElement("label");
            inputLabel.textContent = `Header Text ${index + 1}:`;

            const inputField = document.createElement("input");
            inputField.type = "text";
            inputField.placeholder = `Enter text for header (e.g., ${param.text})`;

            headerInputsContainer.appendChild(inputLabel);
            headerInputsContainer.appendChild(inputField);
          });
        }

        // Render inputs for the body
        const bodyInputsContainer = document.getElementById("body-inputs");
        bodyInputsContainer.innerHTML = "";
        if (bodyComponent) {
          bodyComponent.parameters.forEach((param, index) => {
            const inputLabel = document.createElement("label");
            inputLabel.textContent = `Body Text ${index + 1}:`;

            const inputField = document.createElement("input");
            inputField.type = "text";
            inputField.placeholder = `Enter text for body (e.g., ${param.text})`;

            bodyInputsContainer.appendChild(inputLabel);
            bodyInputsContainer.appendChild(inputField);
          });
        }

        // Render button content without input field
        const buttonContentContainer =
          document.getElementById("button-content");
        buttonContentContainer.innerHTML = "";
        if (buttonComponent) {
          buttonComponent.parameters.forEach((param, index) => {
            const buttonText = document.createElement("p");
            buttonText.textContent = `Button Content ${index + 1}: ${
              param.text
            }`;

            buttonContentContainer.appendChild(buttonText);
          });
        }
      }
    </script>
  </body>
</html>
